set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
if has("win32")
  set rtp+=$USERPROFILE/.conf/dotfiles/vim/bundle/Vundle.vim/
  let path='$USERPROFILE/.conf/dotfiles/vim/bundle'
  call vundle#begin(path)
else
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
endif

" let Vundle manage Vundle, required
Bundle 'gmarik/vundle'

Bundle 'pbrisbin/vim-mkdir'

Bundle 'kien/ctrlp.vim'

Bundle 'scrooloose/nerdtree'

Bundle 'pangloss/vim-javascript'

Bundle 'mxw/vim-jsx'

Bundle 'Shutnik/jshint2.vim'

Bundle "MarcWeber/vim-addon-mw-utils"

Bundle "tomtom/tlib_vim"

Bundle "garbas/vim-snipmate"

Bundle 'ciaranm/detectindent'

Bundle 'tpope/vim-markdown'

Bundle 'jtratner/vim-flavored-markdown'

Bundle 'nathanaelkane/vim-indent-guides'

Bundle 'mileszs/ack.vim'

Bundle 'tpope/vim-eunuch'

Bundle 'vim-ruby/vim-ruby'

Bundle 'danro/rename.vim'

Bundle 'jnwhiteh/vim-golang'

Bundle "ervandew/supertab"

Bundle 'kchmck/vim-coffee-script'

Bundle 'airblade/vim-gitgutter'

Bundle 'tpope/vim-fugitive'

Bundle 'hail2u/vim-css3-syntax'

Bundle 'chrisgillis/vim-bootstrap3-snippets'

Bundle 'groenewege/vim-less'

Bundle 'fatih/vim-go'

Bundle 'Slava/vim-spacebars'

Bundle 'hdima/python-syntax'

call vundle#end()
filetype plugin indent on     " required
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.

" Disable swap files, they suck
set nobackup      
set nowritebackup 
set noswapfile   

set grepprg=ack

" Resize vim splits with alt keys
" map <silent> <A-h> <C-w>< 
" map <silent> <A-j> <C-W>- 
" map <silent> <A-k> <C-W>+ 
" map <silent> <A-l> <C-w>> 

" Fast window resizing with +/- keys (horizontal); / and * keys (vertical)
" if bufwinnr(1)
"   map <kPlus> <C-W>+
"   map <kMinus> <C-W>-
"   map <kDivide> <c-w><
"   map <kMultiply> <c-w>>
" endif

" Enable golang support
au BufRead,BufNewFile *.go set filetype=go 

" Enable github flavored markdown
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" fugitive shortcuts
nmap <leader>g :Gcommit %<cr>   
nmap <leader>gs :Gstatus<cr>    
nmap <leader>gp :Git push origin HEAD<cr>

"""
" Copy Paste Powers
"
" Add ability to yank/paste across vim sessions
" 
" Leader-key (Backslash) y while in visual mode (SHIFT-V or CTRL-V)
vmap <leader>y y:new<CR>:call setline(1,getregtype())<CR>o<Esc>P:wq! ~/vim-clipboard.txt<CR>
" Leader-key (Backslash) p in normal mode (ESC to get out of visual mode)
map <leader>p :sview ~/vim-clipboard.txt<CR>"zdddG:q!<CR>:call setreg('"', @", @z)<CR>p
"
"
" Detect platform and provide os-level copy paste too ;)
if has("unix")
  let s:uname = substitute(system("uname -s"), '\n', '', '')
  if s:uname == "Darwin"
    " Mac Native Copy Paste
    vmap <leader>c :w !pbcopy<cr><cr>
    nmap <leader>v :read !pbpaste<cr><cr>
  elseif s:uname == "Linux"
    " Linux Native Copy Paste
    " Requires xclip ... sudo apt-get install xclip
    " If trying to use it on a headless box, you will need to achieve X11 forwarding
    " In such cases it is probably appropriate to just use the vim-only solution above
    " If using ssh, you need to ssh -X (enable X11 forwarding)
    vmap <leader>c :w !DISPLAY=:0 xclip -selection clipboard<cr><cr>
    nmap <leader>v :read !DISPLAY=:0 xclip -selection clipboard -o<cr><cr>
  endif
endif
"""

" Play nice in tmux
if &term =~ '^screen'
    " tmux will send xterm-style keys when xterm-keys is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif


" Navigate window splits easily
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

" Fix weird arrows in some terminals
let g:NERDTreeDirArrows=0

" Change dir to file dir on each file loaded
" autocmd BufEnter * silent! lcd %:p:h

" Set tab styles
set tabstop=2
set shiftwidth=2
set expandtab

set number
set cursorline

syntax enable

set backspace=indent,eol,start " enable backspace
set hlsearch " highlight searches

""
" Visual Studio stuff..
" still need to figure out how to make the QTKit part 
" dynamically set (e.g. File.basename(Dir.pwd))
command! Msbuild execute "!msbuild"
command! Msrun execute "!msbuild && cls && .\\Debug\\QTKit.exe"
nmap <F5> :Msbuild<CR>
nmap <F6> :Msrun<CR>

" tabs
nmap <C-T> :tabe<CR>
nmap <C-W> :q<CR>

" paste / nopaste
nmap <Leader>[ :set paste<CR>
nmap <Leader>] :set nopaste<CR>

" edit my tmux config
nmap <Leader>t :e ~/.tmux.conf

" find in project
nmap <Leader>f :vimgrep /

" jshint
nmap <Leader>jsh :JSHint<cr>

" find next in project
nmap <Leader>n :cnext<CR>

" source $MYVIMRC reloads the saved $MYVIMRC
nmap <Leader>s :source $MYVIMRC<CR>

" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
nmap <Leader>e :e $MYVIMRC<CR>

"colorscheme monokai
"colorscheme Tomorrow-Night-Bright

set t_Co=256 " Make sure your terminal is 256 colors too!

"" On a white terminal
" set background=light
" highlight LineNr ctermfg=darkblue

"" On a black terminal
" set background=dark

"" Font
" Platform dependent, see .gvimrc

"" Folding
" set nofoldenable " not by default please
" set foldmethod=syntax
" highlight Folded guibg=black guifg=white

"" Toggle fold with Spacebar
" nnoremap <Space> za

" can you tell i really dislike folding ?
let g:vim_markdown_folding_disabled=1

"" NERDTree toggle to CTRL-D
nmap <C-D> :NERDTreeToggle<CR>

map <C-U> :CtrlPClearAllCaches<cr>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|coverage|bower_components|dist|node_modules)$',
  \ 'file': '\v\.(exe|so|dll|pyc)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

"" For all methods, see :help fold-methods
" zi - toggle folding feature
" zM - close all folds
" zv - expand folds to reveal cursor
""

"" HJKL Training Wheels
" inoremap  <Up>     <NOP>
" inoremap  <Down>   <NOP>
" inoremap  <Left>   <NOP>
" inoremap  <Right>  <NOP>
" noremap   <Up>     <NOP>
" noremap   <Down>   <NOP>
" noremap   <Left>   <NOP>
" noremap   <Right>  <NOP>

"" Disable bell
autocmd GUIEnter * set vb t_vb= " in the Gui
autocmd VimEnter * set vb t_vb=

"" Leave Ex mode for good
nnoremap Q <nop>

"" Enable per-project vimrc
set exrc
set secure

" e.g. for cordova
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\v[\/](\.(git|hg|svn)|lib|node_modules|platforms|plugins|resources)$',
"  \ 'file': '\v\.(exe|so|dll|pyc)$',
"  \ 'link': 'some_bad_symbolic_links',
"  \ }
